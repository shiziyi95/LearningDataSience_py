{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x:\n",
      "[[1 2 3]\n",
      " [4 5 6]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "x = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "print(\"x:\\n{}\".format(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NumPy array:\n",
      "[[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "from scipy import sparse\n",
    "# Create a 2D NumPy array with a diagonal of ones, and zeros everywhere else\n",
    "eye = np.eye(4)\n",
    "print(\"NumPy array:\\n{}\".format(eye))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "SciPy sparse CSR matrix:\n",
      "  (0, 0)\t1.0\n",
      "  (1, 1)\t1.0\n",
      "  (2, 2)\t1.0\n",
      "  (3, 3)\t1.0\n"
     ]
    }
   ],
   "source": [
    "# Convert the NumPy array to a SciPy sparse matrix in CSR format \n",
    "# Only the nonzero entries are stored\n",
    "sparse_matrix = sparse.csr_matrix(eye)\n",
    "print(\"\\nSciPy sparse CSR matrix:\\n{}\".format(sparse_matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COO representation:\n",
      "  (0, 0)\t1.0\n",
      "  (1, 1)\t1.0\n",
      "  (2, 2)\t1.0\n",
      "  (3, 3)\t1.0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data = np.ones(4)\n",
    "row_indices = np.arange(4)\n",
    "col_indices = np.arange(4)\n",
    "eye_coo = sparse.coo_matrix((data, (row_indices, col_indices))) \n",
    "print(\"COO representation:\\n{}\".format(eye_coo))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11495f610>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n4/8BbGNAI1Vv2HoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "    # Generate a sequence of numbers from -10 to 10 with 100 steps in between\n",
    "x = np.linspace(-10, 10, 120)\n",
    "# Create a second array using sine\n",
    "y = np.sin(x)\n",
    "# The plot function makes a line chart of one array against another plt.plot(x, y, marker=\"x\")\n",
    "plt.plot(x, y, marker=\"x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Location</th>\n",
       "      <th>Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24</td>\n",
       "      <td>New York</td>\n",
       "      <td>John</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13</td>\n",
       "      <td>Paris</td>\n",
       "      <td>Anna</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>53</td>\n",
       "      <td>Berlin</td>\n",
       "      <td>Peter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>London</td>\n",
       "      <td>Linda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Location   Name\n",
       "0   24  New York   John\n",
       "1   13     Paris   Anna\n",
       "2   53    Berlin  Peter\n",
       "3   33    London  Linda"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "    # create a simple dataset of people\n",
    "data = {'Name': [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n",
    "            'Location' : [\"New York\", \"Paris\", \"Berlin\", \"London\"],\n",
    "            'Age' : [24, 13, 53, 33]\n",
    "}\n",
    "data_pandas = pd.DataFrame(data)\n",
    "# IPython.display allows \"pretty printing\" of dataframes # in the Jupyter notebook\n",
    "display(data_pandas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Location</th>\n",
       "      <th>Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>53</td>\n",
       "      <td>Berlin</td>\n",
       "      <td>Peter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>London</td>\n",
       "      <td>Linda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age Location   Name\n",
       "2   53   Berlin  Peter\n",
       "3   33   London  Linda"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(data_pandas[data_pandas.Age > 30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python version: 2.7.14 (default, Mar 12 2018, 14:41:03) \n",
      "[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\n",
      "pandas version: 0.22.0\n",
      "matplotlib version: 2.2.0\n",
      "NumPy version: 1.14.2\n",
      "SciPy version: 1.0.0\n",
      "IPython version: 5.5.0\n",
      "scikit-learn version: 0.19.1\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(\"Python version: {}\".format(sys.version))\n",
    "import pandas as pd\n",
    "print(\"pandas version: {}\".format(pd.__version__))\n",
    "import matplotlib\n",
    "print(\"matplotlib version: {}\".format(matplotlib.__version__))\n",
    "import numpy as np\n",
    "print(\"NumPy version: {}\".format(np.__version__))\n",
    "import scipy as sp\n",
    "print(\"SciPy version: {}\".format(sp.__version__))\n",
    "import IPython\n",
    "print(\"IPython version: {}\".format(IPython.__version__))\n",
    "import sklearn\n",
    "print(\"scikit-learn version: {}\".format(sklearn.__version__))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris \n",
    "iris_dataset = load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Keys of iris_dataset: \n",
      "['target_names', 'data', 'target', 'DESCR', 'feature_names']\n"
     ]
    }
   ],
   "source": [
    "print(\"Keys of iris_dataset: \\n{}\".format(iris_dataset.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iris Plants Database\n",
      "====================\n",
      "\n",
      "Notes\n",
      "-----\n",
      "Data Set Characteristics:\n",
      "    :Number of Instances: 150 (50 in each of three classes)\n",
      "    :Number of Attributes: 4 numeric, predictive att\n",
      "...\n"
     ]
    }
   ],
   "source": [
    "print(iris_dataset['DESCR'][:193] + \"\\n...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target names: ['setosa' 'versicolor' 'virginica']\n"
     ]
    }
   ],
   "source": [
    "print(\"Target names: {}\".format(iris_dataset['target_names']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature names: \n",
      "['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"
     ]
    }
   ],
   "source": [
    "print(\"Feature names: \\n{}\".format(iris_dataset['feature_names']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of data: <type 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "print(\"Type of data: {}\".format(type(iris_dataset['data'])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of data: (150, 4)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape of data: {}\".format(iris_dataset['data'].shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First five columns of data:\n",
      "[[5.1 3.5 1.4 0.2]\n",
      " [4.9 3.  1.4 0.2]\n",
      " [4.7 3.2 1.3 0.2]\n",
      " [4.6 3.1 1.5 0.2]\n",
      " [5.  3.6 1.4 0.2]]\n"
     ]
    }
   ],
   "source": [
    "print(\"First five columns of data:\\n{}\".format(iris_dataset['data'][:5]))\n",
    "#these ---> feature name --->a key(4) --> in irisdataset --->load_iris --->sklearn dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of target: <type 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "print(\"Type of target: {}\".format(type(iris_dataset['target'])))\n",
    "#wtf is ndarray and target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of target: (150,)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape of target: {}\".format(iris_dataset['target'].shape))\n",
    "#I suppose know that it is encoded with 0 to 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target:\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n",
      " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n",
      " 2 2]\n"
     ]
    }
   ],
   "source": [
    "print(\"Target:\\n{}\".format(iris_dataset['target']))\n",
    "#iris['target_names'] array: 0 means setosa, 1 means versicolor, and 2 means virginica."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# traning data begin\n",
    "from sklearn.model_selection import train_test_split \n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "        iris_dataset['data'], iris_dataset['target'], random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
